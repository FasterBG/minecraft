#include <iostream>
#include <cstdlib>
#include <ctime>
#include <windows.h>
#include <winuser.h>
#include <stdlib.h>

using namespace std;

const int SCREEN_WIDTH=64;
const int SCREEN_HEIGHT=64;
const int UI_WIDTH = 16;
const char border_ch='*';

const char steve_ch='o';
const char alex_ch='a';

const int MAX_TREES=5;
const int MAX_STONES=20;
const int MAX_ZOMBIES=5;
const char tree_ch=194;
const char stone_ch=254;
const char zombie_ch = '&';

const int MAX_TREE_HEALTH=3;
const int MAX_STONE_HEALTH=5;
const int MAX_ZOMBIE_HEALTH = 2;

const int pole_rows = SCREEN_HEIGHT;
const int pole_cols = SCREEN_WIDTH + UI_WIDTH;

bool end_game=false;
int health_map[SCREEN_HEIGHT][SCREEN_WIDTH];
char screen[SCREEN_WIDTH][SCREEN_HEIGHT];

HANDLE hConsoleOutput = ::GetStdHandle(STD_OUTPUT_HANDLE);
COORD screen_buf = {pole_cols, pole_rows};
CHAR_INFO blank_screen[(pole_rows) * (pole_cols)] = {0};

struct TInventory{
    int wood_inventory = 0;
    int stone_inventory = 0;
} ;

TInventory inventory;

enum COLORS {
    BLACK = 0,
    BLUE = FOREGROUND_BLUE,
    CYAN = FOREGROUND_BLUE | FOREGROUND_GREEN,
    GREEN = FOREGROUND_GREEN,
    RED = FOREGROUND_RED,
    BROWN = FOREGROUND_RED | FOREGROUND_GREEN,
    PURPLE = FOREGROUND_RED | FOREGROUND_BLUE,
    LIGHT_GREY =  FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN,

    GREY = 0 | FOREGROUND_INTENSITY,
    LIGHT_BLUE = FOREGROUND_BLUE | FOREGROUND_INTENSITY,
    LIGHT_CYAN = FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY,
    LIGHT_GREEN = FOREGROUND_GREEN | FOREGROUND_INTENSITY,
    LIGHT_RED = FOREGROUND_RED | FOREGROUND_INTENSITY,
    YELLOW = FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY,
    PINK = FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY,
    WHITE =  FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY
};

const COLORS backgroundColor = LIGHT_GREEN;

const COLORS treeColor = BROWN;
const COLORS stoneColor = GREY;
const COLORS zombieColor = GREEN;

class CPlayer{
    private:
        char ch_up;
        char ch_left;
        char ch_down;
        char ch_right;
    public:
        char screen_ch;
        int player_r;
        int player_c;
        TInventory inventory;
        void init();
        void movePlayer();
        CPlayer(char ch, char up, char left, char down, char right){
            screen_ch = ch;
            ch_up = up;
            ch_left = left;
            ch_down = down;
            ch_right = right;
            player_r = 0;
            player_c = 0;
            inventory.wood_inventory = 0;
            inventory.stone_inventory = 0;
            init();
        }
};

class CZombie{
public:
    char screen_ch;
    COLORS object_color;
    int object_r;
    int object_c;
    void init(char ch, COLORS color);
    void moveZombie();
    CZombie(){};
    CZombie(char ch, COLORS color){
        screen_ch = ch;
        object_color = color;
        int object_r = 0;
        int object_c = 0;
        init(ch, color);
    }
};

class CStaticObject{
public:
    int object_r;
    int object_c;
    char screen_ch;
    COLORS color;
    int health;
    void init(char _screen_ch, int _health, COLORS _color);
    CStaticObject(){};
};

void draw_char(char ch, int y, int x, COLORS foreground_color, COLORS background_color) {
    CHAR_INFO ch_info;
    ch_info.Char.AsciiChar = ch;
    ch_info.Attributes = foreground_color | (background_color << 4);

    COORD buf_size = {1, 1};
    COORD buf_coord = {0, 0};
    SMALL_RECT screen_pos = {x, y, x+1, y+1};
    ::WriteConsoleOutput(hConsoleOutput, &ch_info, buf_size, buf_coord, &screen_pos);

}

void clear_screen() {
    COORD buf_coord = {0, 0};
    SMALL_RECT screen_pos = {0, 0, screen_buf.X, screen_buf.Y};
    ::WriteConsoleOutput(hConsoleOutput, blank_screen, screen_buf, buf_coord, &screen_pos);
}

void set_background() {
    for (int i = 0; i < screen_buf.X; i++) {
        for (int j = 0; j < screen_buf.Y; j++) {
             draw_char(' ', j, i, BROWN, backgroundColor);
        }
    }
}

void init_console(){

    SMALL_RECT rect = {0, 0, screen_buf.X, screen_buf.Y};

    ::SetConsoleScreenBufferSize(hConsoleOutput, screen_buf);
    ::SetConsoleWindowInfo(hConsoleOutput, TRUE, &rect);
    ::SetConsoleTitle("MINECRAFT");
    set_background();

}

void draw_str(char* str, int r, int c){
    for(int i = 0; str[i]!='\0'; i++){
        draw_char(str[i], r, c + i, BLACK, backgroundColor);
    }
}

void CPlayer::init(){
    int r, c;
    do {
        r=rand()%SCREEN_HEIGHT;
        c=rand()%SCREEN_WIDTH;
        if (screen[r][c]=='\0'){
            screen[r][c]=screen_ch;
            draw_char(screen_ch, r, c, BLACK, backgroundColor);
            player_r = r;
            player_c = c;
        }
    } while (screen[r][c]!=screen_ch);
}

void CPlayer::movePlayer(){
    int n_r = player_r, n_c = player_c;
    if (GetAsyncKeyState(ch_right)) {n_c++;}
    else if (GetAsyncKeyState(ch_left)) {n_c--;}
    else if (GetAsyncKeyState(ch_up)) {n_r--;}
    else if (GetAsyncKeyState(ch_down)) {n_r++;}
    if (screen[n_r][n_c]=='\0'){
        screen[n_r][n_c]=screen_ch;
        draw_char(screen_ch, n_r, n_c, BLACK, backgroundColor);
        screen[player_r][player_c]='\0';
        draw_char('\0', player_r, player_c, BLACK, backgroundColor);
        player_r = n_r;
        player_c = n_c;
    } else if (health_map[n_r][n_c]>1){
        health_map[n_r][n_c]--;
    }else if (health_map[n_r][n_c] == 1){
        if(screen[n_r][n_c] == tree_ch){
            screen[n_r][n_c]='\0';
            draw_char('\0', n_r, n_c, BLACK, backgroundColor);
            inventory.wood_inventory++;
        }else if(screen[n_r][n_c] == stone_ch){
            screen[n_r][n_c] = '\0';
            draw_char('\0', n_r, n_c, BLACK, backgroundColor);
            inventory.stone_inventory++;
        }
    }
}

void CStaticObject::init(char _screen_ch, int _health, COLORS _color){
    screen_ch = _screen_ch;
    health = _health;
    color = _color;
    int r, c;
    do {
        r = rand()%SCREEN_HEIGHT;
        c = rand()%SCREEN_WIDTH;
        if (screen[r][c]=='\0'){
            screen[r][c] = screen_ch;
            draw_char(screen_ch, r, c, color, backgroundColor);
            object_r = r;
            object_c = c;
        }
    } while (screen[r][c]!=screen_ch);
}

void CZombie::init(char ch, COLORS color){
    int r, c;
    screen_ch = ch;
    object_color = color;

    bool isSet = false;
    do {
        r = rand()%SCREEN_HEIGHT;
        c = rand()%SCREEN_WIDTH;
        if (screen[r][c]=='\0'){
            screen[r][c]=screen_ch;
            draw_char(screen_ch, r, c, object_color, backgroundColor);
            object_r = r;
            object_c = c;
            isSet = true;
        }
    } while (!isSet);
}

void CZombie::moveZombie(){
    int direction = rand() % 4;
    int n_r = object_r, n_c = object_c;
    int zombie_health = health_map[object_r][object_c];
    if(direction == 0){
        // UP
        n_r--;
    }else if(direction == 1){
        // DOWN
        n_r++;
    }else if(direction == 2){
        // RIGTH
        n_c++;
    }else if(direction == 3){
        // LEFT
        n_c--;
    }
    if(screen[n_r][n_c] == '\0'){
        screen[n_r][n_c] = screen_ch;
        draw_char(screen_ch, n_r, n_c, object_color, backgroundColor);
        screen[object_r][object_c] = '\0';
        draw_char('\0', object_r, object_c, object_color, backgroundColor);
        health_map[n_r][n_c] = zombie_health;
        health_map[object_r][object_c] = 0;
        object_r = n_r;
        object_c = n_c;
    }

}

void init(){
    for (int r=0; r<SCREEN_HEIGHT; r++){
        screen[r][0]=border_ch;
        draw_char(border_ch, r, 0, BLACK, backgroundColor);
        health_map[r][0]=-1;
        screen[r][SCREEN_WIDTH-1]=border_ch;
        draw_char(border_ch, r, SCREEN_WIDTH-1, BLACK, backgroundColor);
        health_map[r][SCREEN_WIDTH-1]=-1;
    }
    for (int c=0; c<SCREEN_WIDTH; c++){
        screen[0][c]=border_ch;
        draw_char(border_ch, 0, c, BLACK, backgroundColor);
        health_map[0][c]=-1;
        screen[SCREEN_HEIGHT-1][c]=border_ch;
        draw_char(border_ch, SCREEN_HEIGHT-1, c, BLACK, backgroundColor);
        health_map[SCREEN_HEIGHT-1][c]=-1;
    }

    srand(time(NULL));
}

void UpdateInventory(TInventory& inventory){
    {
    char buff[32];
    itoa(inventory.wood_inventory, buff, 10);
    draw_str("WOOD", 0, SCREEN_WIDTH + 2);
    draw_str(buff, 0, SCREEN_WIDTH + 7);
    }
    {
    char buff[32];
    itoa(inventory.stone_inventory, buff, 10);
    draw_str("STONE", 1, SCREEN_WIDTH + 2);
    draw_str(buff, 1, SCREEN_WIDTH + 8);
    }
}

int main(){
    init_console();
    init();
    CPlayer Steve(steve_ch, 'W', 'A', 'S', 'D');
    CPlayer Alex(alex_ch, 'I', 'J', 'K', 'L');

    CStaticObject trees[MAX_TREES];
    CStaticObject stones[MAX_STONES];
    CZombie zombies[MAX_ZOMBIES];

    for(int i = 0; i < MAX_TREES; i++){
        trees[i].init(tree_ch, MAX_TREE_HEALTH, treeColor);
    }
    for(int i = 0; i < MAX_STONES; i++){
        stones[i].init(stone_ch, MAX_STONE_HEALTH, stoneColor);
    }
    for(int i = 0; i < MAX_ZOMBIES; i++){
        zombies[i].init(zombie_ch, zombieColor);
    }
    while (!end_game){
        for(int i = 0; i < MAX_ZOMBIES; i++){
            zombies[i].moveZombie();
        }
        
        Steve.movePlayer();
        Alex.movePlayer();
        UpdateInventory(Steve.inventory);
        Sleep(200);
    }
    return 0;
}
